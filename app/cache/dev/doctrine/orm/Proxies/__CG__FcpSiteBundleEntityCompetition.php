<?php

namespace Proxies\__CG__\Fcp\SiteBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Competition extends \Fcp\SiteBundle\Entity\Competition implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setSeason($season)
    {
        $this->__load();
        return parent::setSeason($season);
    }

    public function getSeason()
    {
        $this->__load();
        return parent::getSeason();
    }

    public function setCompetitionType($competitionType)
    {
        $this->__load();
        return parent::setCompetitionType($competitionType);
    }

    public function getCompetitionType()
    {
        $this->__load();
        return parent::getCompetitionType();
    }

    public function setFromDate($fromDate)
    {
        $this->__load();
        return parent::setFromDate($fromDate);
    }

    public function getFromDate()
    {
        $this->__load();
        return parent::getFromDate();
    }

    public function setToDate($toDate)
    {
        $this->__load();
        return parent::setToDate($toDate);
    }

    public function getToDate()
    {
        $this->__load();
        return parent::getToDate();
    }

    public function addFixture(\Fcp\SiteBundle\Entity\Fixture $fixtures)
    {
        $this->__load();
        return parent::addFixture($fixtures);
    }

    public function removeFixture(\Fcp\SiteBundle\Entity\Fixture $fixtures)
    {
        $this->__load();
        return parent::removeFixture($fixtures);
    }

    public function getFixtures()
    {
        $this->__load();
        return parent::getFixtures();
    }

    public function addClub(\Fcp\SiteBundle\Entity\Club $clubs)
    {
        $this->__load();
        return parent::addClub($clubs);
    }

    public function removeClub(\Fcp\SiteBundle\Entity\Club $clubs)
    {
        $this->__load();
        return parent::removeClub($clubs);
    }

    public function getClubs()
    {
        $this->__load();
        return parent::getClubs();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'season', 'competitionType', 'fromDate', 'toDate', 'fixtures', 'clubs');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}